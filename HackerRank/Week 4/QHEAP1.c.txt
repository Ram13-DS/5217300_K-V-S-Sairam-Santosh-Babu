#include <stdio.h>

#define MAX 100000

int heap[MAX];
int size = 0;

void swap(int *a, int *b) {
    int t = *a;
    *a = *b;
    *b = t;
}

void insert(int val) {
    heap[size] = val;
    int i = size;
    size++;
    while (i > 0 && heap[(i - 1) / 2] > heap[i]) {
        swap(&heap[i], &heap[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
}

void heapify(int i) {
    int s = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;
    if (l < size && heap[l] < heap[s])
        s = l;
    if (r < size && heap[r] < heap[s])
        s = r;
    if (s != i) {
        swap(&heap[i], &heap[s]);
        heapify(s);
    }
}

void delete(int val) {
    int i;
    for (i = 0; i < size; i++) {
        if (heap[i] == val)
            break;
    }
    heap[i] = heap[size - 1];
    size--;
    if (i > 0 && heap[i] < heap[(i - 1) / 2]) {
        while (i > 0 && heap[(i - 1) / 2] > heap[i]) {
            swap(&heap[i], &heap[(i - 1) / 2]);
            i = (i - 1) / 2;
        }
    } else {
        heapify(i);
    }
}

int main() {
    int q, type, val;
    scanf("%d", &q);
    for (int i = 0; i < q; i++) {
        scanf("%d", &type);
        if (type == 1) {
            scanf("%d", &val);
            insert(val);
        } else if (type == 2) {
            scanf("%d", &val);
            delete(val);
        } else if (type == 3) {
            printf("%d\n", heap[0]);
        }
    }
    return 0;
}
